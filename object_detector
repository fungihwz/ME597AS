import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from vision_msgs.msg import BoundingBox2D
from cv_bridge import CvBridge
import cv2
import numpy as np

class ObjectDetector(Node):
    def __init__(self):
        super().__init__('object_detector')
        self.subscription = self.create_subscription(
            Image,
            '/video_data',
            self.listener_callback,
            10)
        self.publisher_ = self.create_publisher(BoundingBox2D, '/bbox', 10)
        self.bridge = CvBridge()
        self.get_logger().info("Object Detector Initialized")
        
    def listener_callback(self, msg):
        # Convert ROS Image message to OpenCV format
        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        
        # Convert to grayscale and apply thresholding to detect objects
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY_INV)
        
        # Find contours in the binary image
        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        if contours:
            # Assume the largest contour is the object to detect
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            
            # Calculate the centroid of the detected object
            cx = x + w // 2
            cy = y + h // 2
            
            # Print object details
            self.get_logger().info(f"Centroid (x, y): ({cx}, {cy}), Width: {w}, Height: {h}")
            
            # Publish the bounding box information
            bbox_msg = BoundingBox2D()
            bbox_msg.center.position.x = float(cx)
            bbox_msg.center.position.y = float(cy)
            bbox_msg.size_x = float(w)
            bbox_msg.size_y = float(h)
            self.publisher_.publish(bbox_msg)
            
            # Draw the bounding box around the detected object
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.circle(frame, (cx, cy), 5, (255, 0, 0), -1)
        
        # Display the frame with the bounding box
        cv2.imshow("Object Detection", frame)
        cv2.waitKey(1)

def main(args=None):
    rclpy.init(args=args)
    object_detector = ObjectDetector()
    
    rclpy.spin(object_detector)

    # Cleanup
    object_detector.destroy_node()
    rclpy.shutdown()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
